// Общая библиотека Client
/* SQL Queries */
const SQL = {
  RECOMMENDATION: {
    SET_LIKE : `INSERT INTO pa_recommendation_service.product_likes (product_id, user_id, status) values ($1, $2, $3) 
     ON CONFLICT (product_id, user_id) 
     DO UPDATE SET    
     status=$3`,
    GET_LIKES : `SELECT COUNT(product_id) as likes FROM pa_recommendation_service.product_likes WHERE product_id=$1  and blocked is null and deleted is null`,
    GET_LIKE : `SELECT COUNT(user_id) as "like" FROM pa_recommendation_service.product_likes WHERE user_id=$1 and product_id=$2 and status=true  and blocked is null and deleted is null`,
    GET_RATING : `SELECT AVG(rating) as "rating" FROM pa_recommendation_service.product_ratings WHERE product_id=$1  and blocked is null and deleted is null`,
    SET_RATING : `INSERT INTO pa_recommendation_service.product_ratings (product_id, rating, user_id) values ($1,$2,$3) 
     ON CONFLICT (product_id, user_id) 
     DO UPDATE SET    
     rating=$2`,
    GET_REVIEW_COUNT : `SELECT count(id) as "reviewCount" FROM pa_recommendation_service.product_reviews WHERE product_id=$1`,
    GET_REVIEWS: `
    SELECT prw.*, pr.rating FROM pa_recommendation_service.product_reviews prw 
	    left join pa_recommendation_service.product_ratings pr on (pr.product_id = prw.product_id and pr.user_id = prw.user_id )  
	  WHERE 1=1 
	  and prw.product_id=$1 and prw.blocked is null and prw.deleted is null`,
    GET_REVIEW_IMAGES : `SELECT * FROM pa_recommendation_service.product_reviews_media_storage WHERE review_id=$1 and blocked_at is null and deleted_at is null`,
    GET_REVIEW : `
	  SELECT prw.*, pr.rating FROM pa_recommendation_service.product_reviews prw 
  	  left join pa_recommendation_service.product_ratings pr on (pr.product_id = prw.product_id and pr.user_id = prw.user_id )  
  	WHERE 1=1 
  	and prw.product_id=$1 and prw.user_id=$2 and prw.blocked is null and prw.deleted is null`,
    SET_REVIEW : `INSERT INTO pa_recommendation_service.product_reviews (product_id, user_id, comment) values ($1,$2,$3)
     ON CONFLICT (product_id, user_id) 
     DO UPDATE SET         
     comment=$3 
     RETURNING id`,
    SET_REVIEW_IMAGE :`INSERT INTO pa_recommendation_service.product_reviews_media_storage (review_id, media_id, media_key, product_id, user_id, storage, bucket) VALUES ($1,$2,$3,$4,$5,$6,$7)`,
    DELETE_REVIEW_IMAGE : `UPDATE pa_recommendation_service.product_reviews_media_storage set deleted=NOW() where media_id=$1 and user_id=$2 and deleted_at is null`, 
  },
};

const MESSAGES = {
   RU : {    
      INPUT_VALIDATION_ERROR: 'Ошибка проверки входных данных',
   }
}

/* Экспорт */
module.exports = {
  SQL, MESSAGES
};
